swagger: "2.0"
info:
  description: "This is an online_shop server."
  version: "1.0.0"
  title: "online_shop"
host: "onlineshop.com"
basePath: "/"
tags:
- name: "shop"
  description: "Products within the shop."
# - name: "basket"
#   description: "Access to items within a users basket." #could this be within the user portion??
- name: "user"
  description: "Operations about user."
- name: "orders"
  description: "Access to online_shop orders."
paths:
  /shop:
    post:
      tags:
      - "shop" # what goes here??
      summary: "Add a new item to the shop."
      description: ""
      operationId: "addItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object to be added to the shop."
        required: true
        schema:
          $ref: "" #"#/shop/items"  <-- is this correct??
      responses:
        "405": 
          description: "Invalid input."
    put:
      tags:
      - "shop"
      summary: "Update an existing item."
      description: ""
      operationId: "updateItem"
      consumes: 
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object to be added to the shop."
        required: true
        schema:
          $ref: "" # ??
      responses:
        "400":
          description: "Invalid ID supplied."
        "404":
          description: "Item not found."
        "405":
          description: "Validation exception."
  /shop/{itemId}:
    get:
      tags:
      - "shop"
      summary: "Find item by ID"
      description: "Returns a single item."
      operationId: "getItemById"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of item to return."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/Pet" <-- how??
        "400":
          description: "Invalid ID supplied."
        "404":
          description: "Item not found."
    delete:
      tags:
      - "shop"
      summary: "Deletes an item."
      description: ""
      operationId: "deleteItem"
      produces:
      - "application/json"
      parameters:
      # - name: "api_key" 
      #   in: "header"
      #   required: false
      #   type: "string"  #why does it need api_key??
      - name: "itemId"
        in: "path"
        description: "Item id to delete."
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied."
        "404":
          description: "Item not found."
  /orders:
    post:
      tags:
      - "orders"
      summary: "Place an order for an item."
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Order placed for purchasing item."
        required: true
        schema:
          $ref: "" #"#/definitions/Order"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/Order"
        "400":
          description: "Invalid order."
  /orders/{orderId}:
    get:
      tags:
      - "orders"
      summary: "Find purchase order by ID."
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions" #??
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of item that needs to be fetched."
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/Order"
        "400":
          description: "Invalid ID supplied."
        "404":
          description: "Order not found."
    delete:
      tags:
      - "orders"
      summary: "Delete purchase order by ID."
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors" #??
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted."
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied."
        "404":
          description: "Order not found."
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user." #?? Is it different with a create account page on website?
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object."
        required: true
        schema:
          $ref: "" #"#/definitions/User"
      responses:
        default:
          description: "Successful operation."
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system."
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login."
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation."
          schema:
            type: "string"
          # headers:
          #   X-Rate-Limit:
          #     type: "integer"
          #     format: "int32"
          #     description: "calls per hour allowed by the user" #??
          #   X-Expires-After:
          #     type: "string"
          #     format: "date-time"
          #     description: "date in UTC when token expires" #??
        "400":
          description: "Invalid username/password supplied."
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session."
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "Successful operation."
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/User"
        "400":
          description: "Invalid username supplied."
        "404":
          description: "User not found."
    put:
      tags:
      - "user"
      summary: "Updated user."
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Name that needs to be updated."
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object."
        required: true
        schema:
          $ref: "" #"#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied."
        "404":
          description: "User not found."
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted."
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied."
        "404":
          description: "User not found."
  /user/basket:
    get:
      tags:
      - "user"
      summary: "View items in basket."
      description: ""
      operationId: "viewBasket"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "View items in user basket."
        required: true
        schema:
          $ref: "" #"#/definitions/Order"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/Order"
        "400":
          description: "Invalid."   
  /user/basket/{itemId}:
    post:
      tags:
      - "user"
      summary: "Add an item to basket."
      description: ""
      operationId: "addItemToBasket"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of the item that needs to be deleted."
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      - in: "body"
        name: "body"
        description: "Add item to user basket."
        required: true
        schema:
          $ref: "" #"#/definitions/Order"
      responses:
        "200":
          description: "Successful operation."
          schema:
            $ref: "" #"#/definitions/Order"
        "400":
          description: "Invalid order."  
    delete:
      tags:
      - "user"
      summary: "Delete item in basket"
      description: "This can only be done by the logged in user."
      operationId: "deleteItemInBasket"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of the item that needs to be deleted."
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid item ID supplied."
        "404":
          description: "Item not found."
